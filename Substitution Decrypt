/* Main function of the C program. */

#include<stdio.h>
#include<string.h>
 
int main()
{
    int arraySize = 100; //integer created to allow ease of increasing and decreasing array size of original message and encrypted message
	char *substitution_Key = "mnbvcxzlkjhgfdsapoiuytrewq"; //nominates the cypher code to be used in the exercise
	char *position_ptr;
	char substitutionMessage[arraySize], substitutionCode[arraySize]; //declares two arrays to be used - the first for original message to be entered into, and second to store the encrypted code
	int messageLength, i, position, temp; //declares the integers needed for the exercise
	
	printf("Enter message to be encrypted using Substitution Cipher:"); //prints message to screen as prompt for user to enter the message to be encrypted
	fgets(substitutionCode, sizeof(substitutionCode), stdin); /*fgets is a function used to grab the message in the previous line and store in "substitutionMessage". (pointer to array of chars, max number of characters to be read, 
	                                                               and file that the characters are read from)*/
	messageLength = strlen(substitutionCode); //determines the string length of "substitutionCode"
	
	substitutionCode[messageLength];       //defines array size of the encrypted message
	for (i=0; i < messageLength; i++)   {       //Loop used to continue through each character of the original input or in this case "substitutionCode"
	    if (substitutionCode[i] >= 'a' && substitutionCode[i] <= 'z')   {       //if the character in the code is between ascii values of 'a' and 'z', this code will execute
	        position_ptr = strchr(substitution_Key, substitutionCode[i]);       //the character in substitution code is searched for within the key and is stored as a pointer in position_ptr
	        position = position_ptr - substitution_Key;     //this finds the index of the character found and stored in the pointer to determine how many characters along in the key it is and stores the integer in position   
	        temp = (position + 'a') - 32;       //int "position" is then added to ascii value 'a' to determine how many letters along in the alphabet the decrypted character is. 32 is subtracted to ensure the result is a capital letter
	        substitutionCode[i] = temp;     //the decrypted letter is stored in substitution code
	    }
	    else if (substitutionCode[i] >= 'A' && substitutionCode[i] <= 'Z')  {    //if the character in the code is between ascii values of 'A' and 'Z', this code will execute   
	        substitutionCode[i] = substitutionCode[i] + 32;     //the character has ascii value of 32 added to place into lower case letters for ease of conversion below
	        position_ptr = strchr(substitution_Key, substitutionCode[i]);       //the character in substitution code is searched for within the key and is stored as a pointer in position_ptr      
	        position = position_ptr - substitution_Key;     //this finds the index of the character found and stored in the pointer to determine how many characters along in the key it is and stores the integer in position       
	        temp = (position + 'a') - 32;       //int "position" is then added to ascii value 'a' to determine how many letters along in the alphabet the decrypted character is. 32 is subtracted to return back to capital letters              
	        substitutionCode[i] = temp;     //the decrypted letter is stored in substitution code
	    }
	    else    {
	        substitutionCode[i] = substitutionCode[i];      //if the character is a special character, this code will execute with no conversion. The special character will be stored as is in the substitution code. 
	    }
	}
	
	substitutionCode[messageLength] = 0; //this null terminates the string which effectively tells you where the end of the string is
	
	printf("Decrypted message: %s", substitutionCode); //prints decrypted message to screen
	
	return 0;
}
